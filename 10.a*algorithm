import heapq

class Node:
    def __init__(self, x, y, cost, parent=None):
        self.x = x
        self.y = y
        self.cost = cost
        self.parent = parent

    def __lt__(self, other):
        return self.cost < other.cost

def astar(grid, start, goal):
    def heuristic(node):
        # Manhattan distance heuristic
        return abs(node.x - goal[0]) + abs(node.y - goal[1])

    open_list = []
    closed_set = set()
    start_node = Node(start[0], start[1], 0)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if (current_node.x, current_node.y) == goal:
            path = []
            while current_node:
                path.append((current_node.x, current_node.y))
                current_node = current_node.parent
            return path[::-1]

        closed_set.add((current_node.x, current_node.y))

        for neighbor in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            x, y = current_node.x + neighbor[0], current_node.y + neighbor[1]

            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] != 1 and (x, y) not in closed_set:
                neighbor_node = Node(x, y, current_node.cost + 1, current_node)
                if neighbor_node not in open_list:
                    heapq.heappush(open_list, neighbor_node)

    return None

# Example usage
grid = [
    [0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
goal = (4, 4)

path = astar(grid, start, goal)
if path:
    print("Path found:", path)
else:
    print("No path found")
