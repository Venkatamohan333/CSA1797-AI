def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_win(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def evaluate(board):
    if check_win(board, 'X'):
        return 10
    elif check_win(board, 'O'):
        return -10
    return 0

def minimax(board, depth, is_maximizing):
    if check_win(board, 'X'):
        return 10
    if check_win(board, 'O'):
        return -10
    if is_full(board):
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_eval = float('-inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                eval = minimax(board, 0, False)
                board[i][j] = ' '
                if eval > best_eval:
                    best_eval = eval
                    move = (i, j)
    return move

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)' ']]
    while True:
        print_board(board)
        row, col = map(int, input("Enter your move (row and column, 0-2): ").split())
        if board[row][col] == ' ':
            board[row][col] = 'O'
            if check_win(board, 'O'):
                print_board(board)
                print("You win!")
                break
            if is_full(board):
                print_board(board)
                print("It's a draw!")
                break
            move = best_move(board)
            board[move[0]][move[1]] = 'X'
            if check_win(board, 'X'):
                print_board(board)
                print("AI wins!")
                break
            if is_full(board):
                print_board(board)
                print("It's a draw!")
                break
        else:
            print("That cell is already occupied. Try again.")

if __name__ == "__main__":
    tic_tac_toe()
