def water_jug_dfs(jug1_capacity, jug2_capacity, target_amount):
    def dfs(jug1, jug2, path):
        if jug1 == target_amount or jug2 == target_amount:
            path.append((jug1, jug2))
            return path

        visited_states.add((jug1, jug2))

        # Empty jug1
        if jug1 > 0 and (0, jug2) not in visited_states:
            new_path = dfs(0, jug2, path + [(0, jug2)])
            if new_path:
                return new_path

        # Empty jug2
        if jug2 > 0 and (jug1, 0) not in visited_states:
            new_path = dfs(jug1, 0, path + [(jug1, 0)])
            if new_path:
                return new_path

        # Fill jug1
        if jug1 < jug1_capacity and (jug1_capacity, jug2) not in visited_states:
            new_path = dfs(jug1_capacity, jug2, path + [(jug1_capacity, jug2)])
            if new_path:
                return new_path

        # Fill jug2
        if jug2 < jug2_capacity and (jug1, jug2_capacity) not in visited_states:
            new_path = dfs(jug1, jug2_capacity, path + [(jug1, jug2_capacity)])
            if new_path:
                return new_path

        # Pour from jug1 to jug2
        if jug1 > 0 and jug2 < jug2_capacity:
            pour_amount = min(jug1, jug2_capacity - jug2)
            new_jug1, new_jug2 = jug1 - pour_amount, jug2 + pour_amount
            if (new_jug1, new_jug2) not in visited_states:
                new_path = dfs(new_jug1, new_jug2, path + [(new_jug1, new_jug2)])
                if new_path:
                    return new_path

        # Pour from jug2 to jug1
        if jug2 > 0 and jug1 < jug1_capacity:
            pour_amount = min(jug2, jug1_capacity - jug1)
            new_jug1, new_jug2 = jug1 + pour_amount, jug2 - pour_amount
            if (new_jug1, new_jug2) not in visited_states:
                new_path = dfs(new_jug1, new_jug2, path + [(new_jug1, new_jug2)])
                if new_path:
                    return new_path

        return None

    visited_states = set()
    initial_state = (0, 0)
    result_path = dfs(0, 0, [initial_state])

    if result_path:
        return result_path
    else:
        return "No solution found"

# Example usage:
jug1_capacity = 4
jug2_capacity = 3
target_amount = 2

solution = water_jug_dfs(jug1_capacity, jug2_capacity, target_amount)
for step, state in enumerate(solution):
    print(f"Step {step}: Jug 1={state[0]}, Jug 2={state[1]}")
